import {Pool} from "pg";
import {EstateData} from "./model/estate-data";
import {EstatesResponse} from "./model/estates-response";

const pool = new Pool({
    host: process.env.DB_HOST,
    user: process.env.DB_USER,
    port: 5432,
    database: process.env.DB_NAME,
    max: 20,
    idleTimeoutMillis: 30000,
    connectionTimeoutMillis: 2000,
})
export const initDb = async () => {
    await pool.query(`DROP TABLE IF EXISTS "estates"`)
    await pool.query(`
        CREATE TABLE IF NOT EXISTS "estates"
        (
            id    BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
            title VARCHAR(1000),
            img   VARCHAR(1000),
            PRIMARY KEY (id)
        );`)
    console.log("[LOG]: DATABASE HAS BEEN INITIALIZED");
};

export const insertEstates = async (estates: EstateData[]) => {
    const values = estates.map(estateData => `('${estateData.title}','${estateData.img}')`).join(",");
    await pool.query(`
        INSERT INTO "estates" ("title", "img") VALUES ${values};`)
    console.log("[LOG]: DATA HAS BEEN INSERTED INTO THE DATABASE");
};

export const getEstates = async (pageIndex?: number, pageSize?: number): Promise<EstatesResponse> => {
    let baseQuery = `SELECT *, count(*) OVER () AS total
                     FROM "estates"`;
    if (pageIndex && pageSize) {
        baseQuery += ` LIMIT ${pageSize} OFFSET ${pageIndex * pageSize}`;
    }
    const result = await pool.query(baseQuery);
    const total = result.rows[0]?.total;
    const estates = result.rows.map(row => {
        delete row.total;
        return row;
    });
    return {estates, total};
};

